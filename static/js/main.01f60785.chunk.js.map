{"version":3,"sources":["components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/comments.ts","components/CommentItem.tsx","components/PostDetails.tsx","components/UserItem.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostItem","_ref","post","toggleSelectedPostFunction","selectedPost","_jsxs","children","_jsx","id","title","className","type","classNames","onClick","PostsList","posts","selectPost","map","Loader","NewCommentForm","addComment","postId","_useState","useState","name","email","text","_useState2","_slicedToArray","formFields","setFormFields","_useState3","isNameError","isEmailError","isTextError","_useState4","formErrors","setFormErrors","_useState5","_useState6","isLoading","setIsLoading","onSubmitHandler","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","wrap","_context","prev","next","preventDefault","trim","currErrors","_objectSpread","abrupt","currFields","finish","stop","_x","apply","arguments","onSubmit","htmlFor","placeholder","value","onChange","target","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","concat","createComment","deleteComment","commentId","CommentItem","comment","deleteCommentFunction","href","PostDetails","comments","setComments","isError","setIsError","_useState7","_useState8","formIsActive","setFormIsActive","getCommentsfunc","t0","t1","sent","t2","useEffect","useCallback","_ref3","_callee2","newComment","_context2","currComment","currentComments","_toConsumableArray","catch","error","_x2","_x3","_x4","_x5","_ref4","_callee3","_context3","filter","_x6","_Fragment","UserItem","user","selectUserFunction","selectedUser","UserSelector","users","selectUser","dropDownActive","setDropDownActive","dropdown","useRef","closeDropdown","e","current","contains","document","addEventListener","removeEventListener","ref","role","App","setUsers","setSelectedUser","setPosts","_useState9","_useState10","_useState11","_useState12","setSelectedPost","getUsersFunc","getPostsfunc","userId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.01f60785.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post;\n  toggleSelectedPostFunction: (post: Post) => void;\n  selectedPost: Post | null;\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  toggleSelectedPostFunction,\n  selectedPost,\n}) => {\n  const toggleSelectedPostHandler = () => toggleSelectedPostFunction(post);\n\n  return (\n    <tr data-cy=\"Post\" key={post.id}>\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames('button is-link', {\n            'is-light': post.id !== selectedPost?.id,\n          })}\n          onClick={toggleSelectedPostHandler}\n        >\n          {post.id !== selectedPost?.id ? 'Open' : 'Close'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  selectPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  selectPost,\n}) => {\n  const toggleSelectedPostFunction = (post: Post) => {\n    if (post.id === selectedPost?.id) {\n      selectPost(null);\n    } else {\n      selectPost(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            posts.map(post => (\n              <PostItem\n                key={post.id}\n                post={post}\n                toggleSelectedPostFunction={toggleSelectedPostFunction}\n                selectedPost={selectedPost}\n              />\n            ))\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  addComment: (\n    email: string,\n    body: string,\n    name: string,\n    postId: number,\n  ) => Promise<void>;\n  postId: number;\n};\n\ntype FormFields = {\n  name: string,\n  email: string,\n  text: string,\n};\n\ntype FormErrors = {\n  isNameError: boolean,\n  isEmailError: boolean,\n  isTextError: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ addComment, postId }) => {\n  const [formFields, setFormFields] = useState<FormFields>({\n    name: '',\n    email: '',\n    text: '',\n  });\n\n  const [formErrors, setFormErrors] = useState<FormErrors>({\n    isNameError: false,\n    isEmailError: false,\n    isTextError: false,\n  });\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const changNameHandler = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setFormFields(currFields => ({\n      ...currFields,\n      name: event.target.value,\n    }));\n\n    setFormErrors(currErrors => ({\n      ...currErrors,\n      isNameError: false,\n    }));\n  };\n\n  const changEmailHandler = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setFormFields(currFields => ({\n      ...currFields,\n      email: event.target.value,\n    }));\n\n    setFormErrors(currErrors => ({\n      ...currErrors,\n      isEmailError: false,\n    }));\n  };\n\n  const changTextHandler = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setFormFields(currFields => ({\n      ...currFields,\n      text: event.target.value,\n    }));\n\n    setFormErrors(currErrors => ({\n      ...currErrors,\n      isTextError: false,\n    }));\n  };\n\n  const onSubmitHandler = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!formFields.name.trim()) {\n      setFormErrors(currErrors => ({\n        ...currErrors,\n        isNameError: true,\n      }));\n    }\n\n    if (!formFields.email.trim()) {\n      setFormErrors(currErrors => ({\n        ...currErrors,\n        isEmailError: true,\n      }));\n    }\n\n    if (!formFields.text.trim()) {\n      setFormErrors(currErrors => ({\n        ...currErrors,\n        isTextError: true,\n      }));\n    }\n\n    if (!formFields.name.trim()\n      || !formFields.email.trim()\n      || !formFields.text.trim()) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      await addComment(\n        formFields.email,\n        formFields.text,\n        formFields.name,\n        postId,\n      );\n    } finally {\n      setIsLoading(false);\n      setFormFields(currFields => ({\n        ...currFields,\n        text: '',\n      }));\n    }\n  };\n\n  const resetFields = () => {\n    setFormFields({\n      name: '',\n      email: '',\n      text: '',\n    });\n\n    setFormErrors({\n      isNameError: false,\n      isEmailError: false,\n      isTextError: false,\n    });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={onSubmitHandler}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': formErrors.isNameError,\n            })}\n            value={formFields.name}\n            onChange={changNameHandler}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formErrors.isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': formErrors.isEmailError,\n            })}\n            value={formFields.email}\n            onChange={changEmailHandler}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {formErrors.isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formErrors.isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': formErrors.isTextError,\n            })}\n            value={formFields.text}\n            onChange={changTextHandler}\n          />\n        </div>\n\n        {formErrors.isTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetFields}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (\n  {\n    email,\n    name,\n    postId,\n    body,\n  }: Omit<Comment, 'id'>,\n) => {\n  return client.post<Comment>('/comments', {\n    email, name, postId, body,\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment;\n  deleteCommentFunction: (commentId: number) => Promise<void>;\n};\n\nexport const CommentItem: React.FC<Props> = ({\n  comment,\n  deleteCommentFunction,\n}) => {\n  const deleteCommentHandler = () => deleteCommentFunction(comment.id);\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${comment.email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={deleteCommentHandler}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { createComment, deleteComment, getComments } from '../api/comments';\nimport { Comment } from '../types/Comment';\nimport { CommentItem } from './CommentItem';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [formIsActive, setFormIsActive] = useState(false);\n\n  const getCommentsfunc = async (postId: number) => {\n    try {\n      setComments(await getComments(postId));\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    setFormIsActive(false);\n\n    getCommentsfunc(post.id);\n  }, [post]);\n\n  const toggleFormActive = () => setFormIsActive(true);\n\n  const addComment = useCallback(async (\n    email: string,\n    body: string,\n    name: string,\n    postId: number,\n  ) => {\n    const newComment: Omit<Comment, 'id'> = {\n      email,\n      body,\n      name,\n      postId,\n    };\n\n    return createComment(newComment)\n      .then(currComment => {\n        setComments(currentComments => [...currentComments, currComment]);\n      })\n      .catch((error) => {\n        throw error;\n      });\n  }, []);\n\n  const deleteCommentFunction = useCallback(async (commentId: number) => {\n    setComments(currentComments => currentComments\n      .filter(currComment => currComment.id !== commentId));\n\n    try {\n      await deleteComment(commentId);\n    } catch (error) {\n      setIsError(true);\n    }\n  }, []);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading\n            ? <Loader />\n            : (\n              <>\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"CommentsError\"\n                  >\n                    Something went wrong\n                  </div>\n                )}\n\n                {/* eslint-disable-next-line no-extra-boolean-cast */}\n                {!isLoading && !isError && !!!comments.length && (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )}\n\n                {!isLoading && !isError && !!comments.length && (\n                  <>\n                    <p className=\"title is-4\">Comments:</p>\n\n                    {\n                      comments.map(comment => (\n                        <CommentItem\n                          key={comment.id}\n                          comment={comment}\n                          deleteCommentFunction={deleteCommentFunction}\n                        />\n\n                      ))\n                    }\n                  </>\n                )}\n                {!isLoading && !isError && !formIsActive && (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={toggleFormActive}\n                  >\n                    Write a comment\n                  </button>\n                )}\n              </>\n            )}\n        </div>\n\n        {formIsActive\n          && (\n            <NewCommentForm\n              addComment={addComment}\n              postId={post.id}\n            />\n          )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  user: User;\n  selectUserFunction: (user: User) => void;\n  selectedUser: User | null;\n};\n\nexport const UserItem: React.FC<Props> = ({\n  user,\n  selectUserFunction,\n  selectedUser,\n}) => {\n  const selectUserHandler = () => selectUserFunction(user);\n\n  return (\n    <a\n      key={user.id}\n      href={`#user-${user.id}`}\n      className={classNames('dropdown-item', {\n        'is-active': user.id === selectedUser?.id,\n      })}\n      onClick={selectUserHandler}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\nimport { UserItem } from './UserItem';\n\ntype Props = {\n  users: User[];\n  selectUser: (user: User) => void;\n  selectedUser: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = (\n  {\n    users,\n    selectUser,\n    selectedUser,\n  },\n) => {\n  const [dropDownActive, setDropDownActive] = useState(false);\n  const dropdown = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const closeDropdown = (e: MouseEvent) => {\n      if (dropdown.current\n        && dropDownActive\n        && !dropdown.current.contains(e.target as Node)) {\n        setDropDownActive(false);\n      }\n    };\n\n    document.addEventListener('click', closeDropdown);\n\n    return () => {\n      document.removeEventListener('click', closeDropdown);\n    };\n  }, [dropDownActive]);\n\n  const toggleDropdown = () => setDropDownActive(prev => !prev);\n  const selectUserFunction = (user: User) => {\n    selectUser(user);\n    setDropDownActive(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': dropDownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\" ref={dropdown}>\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleDropdown}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {\n            users.map(user => (\n              <UserItem\n                key={user.id}\n                user={user}\n                selectUserFunction={selectUserFunction}\n                selectedUser={selectedUser}\n              />\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const getUsersFunc = async () => {\n    try {\n      setUsers(await getUsers());\n    } catch (error) {\n      setIsError(true);\n    }\n  };\n\n  const getPostsfunc = async (user: User) => {\n    try {\n      setPosts(await getPosts(user.id));\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getUsersFunc();\n  }, []);\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (selectedUser) {\n      setIsLoading(true);\n      getPostsfunc(selectedUser);\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectUser={setSelectedUser}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {\n                  // eslint-disable-next-line no-extra-boolean-cast\n                  !!!selectedUser\n                  && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )\n                }\n\n                {\n                  isLoading\n                    ? <Loader />\n                    : (\n                      <>\n                        {isError && (\n                          <div\n                            className=\"notification is-danger\"\n                            data-cy=\"PostsLoadingError\"\n                          >\n                            Something went wrong!\n                          </div>\n                        )}\n                        {/* eslint-disable-next-line no-extra-boolean-cast */}\n                        {!!!posts.length && selectedUser && !isError && (\n                          <div\n                            className=\"notification is-warning\"\n                            data-cy=\"NoPostsYet\"\n                          >\n                            No posts yet\n                          </div>\n                        )}\n\n                        {!!posts.length && selectedUser && !isError && (\n                          <PostsList\n                            posts={posts}\n                            selectedPost={selectedPost}\n                            selectPost={setSelectedPost}\n                          />\n                        )}\n                      </>\n                    )\n                }\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}